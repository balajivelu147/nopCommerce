@using Nop.Core
@using Nop.Core.Configuration
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@using Nop.Core.Events
@using Nop.Services.Security
@inject CommonSettings commonSettings
@inject IEventPublisher eventPublisher
@inject IPermissionService permissionService
@inject IWorkContext workContext
@inject IThemeContext themeContext
@inject SeoSettings seoSettings
@inject AppSettings appSettings

@{
    NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/js/public.countryselect.js");
    NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/js/public.ajaxcart.js");
    NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/js/public.common.js");
    //when jQuery migrate script logging is active you will see the log in the browser console
    if (commonSettings.JqueryMigrateScriptLoggingActive)
    {
        NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/jquery-migrate/jquery-migrate.js");
    }
    else    
    {
        NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/jquery-migrate/jquery-migrate.min.js");
    }
    NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/jquery-ui-dist/jquery-ui.min.js");
    NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js");
    NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/jquery-validation/jquery.validate.min.js");
    NopHtml.AppendScriptParts(ResourceLocation.Footer, "~/lib_npm/jquery/jquery.min.js");

    //custom tag(s);
    if (!string.IsNullOrEmpty(seoSettings.CustomHeadTags))
    {
        NopHtml.AppendHeadCustomParts(seoSettings.CustomHeadTags);
    }

    var displayMiniProfiler = appSettings.Get<CommonConfig>().MiniProfilerEnabled && await permissionService.AuthorizeAsync(StandardPermissionProvider.AccessProfiling);

    //event
    await eventPublisher.PublishAsync(new PageRenderingEvent(NopHtml));

    var currentPageClass = (await (await Html.PartialAsync("_CurrentPageClass")).RenderHtmlContentAsync()).Trim();
}

<!DOCTYPE html>
<html lang="@CultureInfo.CurrentUICulture.TwoLetterISOLanguageName" dir="@Html.GetUIDirection(!await Html.ShouldUseRtlThemeAsync())" class="@NopHtml.GeneratePageCssClasses()">
<head>




    <script  async>
        getUserLocation();
        /*Location functions here*/
        function getUserLocation() {
            //check if the geolocation object is supported, if so get position
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(displayLocation, displayError);
            } else {
              //  document.getElementById("map").innerHTML = "Sorry - your browser doesn't support geolocation!";
            }
        };


        var currentUserLat = "";
        var currentUserLong = "";
        function displayLocation(position) {
            //console.log(JSON.stringify(position))
            //document.getElementById("geolocationtag").innerHTML = JSON.stringify(position);

            //build text string including co-ordinate data passed in parameter
            var displayText = "User latitude is " + position.coords.latitude + " and longitude is " + position.coords.longitude;
            currentUserLat = position.coords.latitude;
            currentUserLong = position.coords.longitude;
            //document.getElementById("geo-latitude").value = currentUserLat;
            //document.getElementById("geo-longitude").value = currentUserLong;
            //document.getElementById("geo-accuracy").value = position.coords.accuracy;
            if(currentUserLat !=sessionStorage.getItem("geo-latitude")){
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.Action("LatLong2", "Product"))",
                    data: {
                        "latitude": currentUserLat,
                        "longitude": currentUserLong,
                        "accuracy": position.coords.accuracy//position.coords.accuracy,
                    },
                    success: function (data, textStatus, jqXHR) {
                         sessionStorage.setItem("geo-latitude", currentUserLat);
                        sessionStorage.setItem("geo-longitude", currentUserLong);
                        sessionStorage.setItem("geo-accuracy", position.coords.accuracy);
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                       // $("#getOptionsByAttributeIdAlert").click();
                    }
                });
            }
       };

        function displayError(error) {
          //  console.log(error)
            //get a reference to the HTML element for writing result
            //var locationElement = document.getElementById("map");

            ////find out which error we have, output message accordingly
            //switch (error.code) {
            //    case error.PERMISSION_DENIED:
            //        locationElement.innerHTML = "Permission was denied";
            //        break;
            //    case error.POSITION_UNAVAILABLE:
            //        locationElement.innerHTML = "Location data not available";
            //        break;
            //    case error.TIMEOUT:
            //        locationElement.innerHTML = "Location request timeout";
            //        break;
            //    case error.UNKNOWN_ERROR:
            //        locationElement.innerHTML = "An unspecified error occurred";
            //        break;
            //    default:
            //        locationElement.innerHTML = "Who knows what happened...";
            //        break;
            //}
        }

    </script>
    <title>@NopHtml.GenerateTitle()</title>
    <meta http-equiv="Content-type" content="text/html;charset=UTF-8" />
    <meta name="description" content="@NopHtml.GenerateMetaDescription()" />
    <meta name="keywords" content="@NopHtml.GenerateMetaKeywords()" />
    <meta name="generator" content="nopCommerce" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=2.0" />
    <!link rel="preload" as="font" href="@Url.Content($"~/Themes/{await themeContext.GetWorkingThemeNameAsync()}/Content/fonts/pacific.woff")" crossorigin />
    @*<!link href="https://fonts.googleapis.com/css?family=Roboto:300,300i,400,700&amp;subset=cyrillic,cyrillic-ext,greek,greek-ext,latin-ext,vietnamese" rel="stylesheet" />*@
    <!link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;700&display=swap" rel="stylesheet">
    @NopHtml.GenerateHeadCustom()
    @*This is used so that themes can inject content into the header*@
    @await Html.PartialAsync("Head")
    @await Component.InvokeAsync("Widget", new { widgetZone = "head_html_tag_after_css_files_pacific" })
    @NopHtml.GenerateCssFiles()
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeadHtmlTag })
    @NopHtml.GenerateCanonicalUrls()
    @await Component.InvokeAsync("NewsRssHeaderLink")
    @await Component.InvokeAsync("BlogRssHeaderLink")
    @*Insert favicon and app icons head code*@
    @await Component.InvokeAsync("Favicon")
    @if (displayMiniProfiler)
    {
        <mini-profiler />
    }
    @NopHtml.GenerateScripts(ResourceLocation.Head)
    @NopHtml.GenerateInlineScripts(ResourceLocation.Head)
    <!--Powered by nopCommerce - https://www.nopCommerce.com-->
</head>
<body class="@currentPageClass">
    @RenderBody()
    <div class="scroll-back-button" id="goToTop"></div>
    @NopHtml.GenerateScripts(ResourceLocation.Footer)
    @NopHtml.GenerateInlineScripts(ResourceLocation.Footer)
</body>
<input type="hidden" id="geo-latitude" >
<input type="hidden" id="geo-longitude">
<input type="hidden" id="geo-accuracy">
</html>