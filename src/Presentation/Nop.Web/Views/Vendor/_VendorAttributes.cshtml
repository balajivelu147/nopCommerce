@model IList<VendorAttributeModel>

@using Nop.Core.Domain.Catalog;
@using Nop.Core.Domain.Media;
@using Nop.Services.Vendors

@using Nop.Core
@using System.Text
@using Nop.Services.Media
@inject IDownloadService downloadService

@foreach (var attribute in Model)
{
    var controlId = $"{NopVendorDefaults.VendorAttributePrefix}{attribute.Id}";
    var textPrompt = attribute.Name;
    var IsDependentSelectorAvailable = false;
    <div class="inputs vendor-attributes">
       
       <div class="label-wrapper">
           <div title="@(attribute.ToolTip)">
                <label>@textPrompt  
                    @if (!string.IsNullOrEmpty(attribute.ToolTip)) { 
                    <i class="fas fa-question-circle"></i>
                    }
                </label>  
           </div>
       </div>

        @switch (attribute.AttributeControlType)
        {
            case AttributeControlType.DropdownList:
                {
                    <select name="@(controlId)" id="@(controlId)" >
                        @if (!attribute.IsRequired)
                        {
                            <option value="0">---</option>
                        }
                        @foreach (var attributeValue in attribute.Values)
                        {
                            //TODO: should avoid if else
                            if(attributeValue.DependentAttributeValueId != null)
                            {
                                 IsDependentSelectorAvailable = true;
                                <option selected="@attributeValue.IsPreSelected" value="@attributeValue.Id" id="dependent_@attributeValue.DependentAttributeValueId" class="dependent @attributeValue.DependentAttributeValueId">@attributeValue.Name</option>
                            }else{
                                <option selected="@attributeValue.IsPreSelected" value="@attributeValue.Id">@attributeValue.Name</option>
                            }
                        }
                    </select>
                }
                break;
            case AttributeControlType.RadioList:
                {
                    <ul class="option-list">
                        @foreach (var attributeValue in attribute.Values)
                        {
                            <li>
                                <input id="@(controlId)_@(attributeValue.Id)" type="radio" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" />
                                <label for="@(controlId)_@(attributeValue.Id)" title="@(attributeValue.Name?
                        .Substring(attributeValue.Name.IndexOf("(")+1,-attributeValue.Name.IndexOf("(")-1+attributeValue.Name.IndexOf(")")))">
                                    @(attributeValue.Name?.Substring(0, attributeValue.Name.IndexOf("(")))
                                </label>
                            </li>
                        }
                    </ul>
                }
                break;
            case AttributeControlType.Checkboxes:
            case AttributeControlType.ReadonlyCheckboxes:
                {
                    <ul class="option-list">
                        @foreach (var attributeValue in attribute.Values)
                        {
                            <li>
                                <input id="@(controlId)_@(attributeValue.Id)" type="checkbox" name="@(controlId)" value="@attributeValue.Id" checked="@attributeValue.IsPreSelected" @(attribute.AttributeControlType == AttributeControlType.ReadonlyCheckboxes ? Html.Raw(" disabled=\"disabled\"") : null) />
                                <label for="@(controlId)_@(attributeValue.Id)">@attributeValue.Name</label>
                            </li>
                        }
                    </ul>
                }
                break;
            case AttributeControlType.TextBox:
                {
                    if (@attribute.DependencyType == "compare password")
                    {
                      <input name="@(controlId)" type="password" class="textbox" id="@(controlId)" value="@(attribute.DefaultValue)" autocomplete="off"/><br/>
                      <span id='message@(controlId)'></span>
                    }
                    else { 
                      <input name="@(controlId)" type="text" class="textbox" id="@(controlId)" value="@(attribute.DefaultValue)" />
                    }
                }
                break;
            case AttributeControlType.MultilineTextbox:
                {
                    <textarea id="@(controlId)" name="@(controlId)">@(attribute.DefaultValue)</textarea>
                }
                break;

            case AttributeControlType.DatepickerCalendar:
                {
                    <p>Select date</p>

                    <div class="attribute-data">
                        @*<input id="@(endDateControlId)" name="@(endDateControlId)" type="text" class="datepicker" value="@(Model.RentalEndDate.HasValue ? Model.RentalEndDate.Value.ToShortDateString() : null)" @if(isMobileDevice){<text>readonly</text>}/>*@
                        <input class="form-control" name="@(controlId)" type="text" placeholder="Choose time" id="@(controlId)" value="@(attribute.DefaultValue)">

                        <script asp-location="Footer">
                            $(document).ready(function () {
                                $("#@(controlId)").datepicker({ dateFormat: "m/d/yy", multidate: false });
                            });
                        </script>
                    </div>


                }
                break;


            case AttributeControlType.TimepickerCalendar:
                {
                    <input class="form-control" id="@(controlId)" name="@(controlId)" value="@(attribute.DefaultValue)" type="text" placeholder="Choose time">

                    //TODO: remove unused links
                    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" rel="stylesheet" />

                    <link href="https://cdn.jsdelivr.net/gh/djibe/bootstrap-material-datetimepicker@6659d24c7d2a9c782dc2058dcf4267603934c863/css/bootstrap-material-datetimepicker-bs4.min.css" rel="stylesheet" />

                    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.2/js/bootstrap.bundle.min.js"></script>

                    <script src="https://cdn.jsdelivr.net/gh/moment/moment@develop/min/moment-with-locales.min.js"></script>

                    <script src="https://cdn.jsdelivr.net/gh/djibe/bootstrap-material-datetimepicker@83a10c38ee94dd27fd946ea137af6667c65a738f/js/bootstrap-material-datetimepicker-bs4.min.js"></script>


                    <script asp-location="Footer">

                        $(document).ready(function () {
                        @*$(function () {*@
                            var $now = moment();
                            var $dateMin = $now.subtract(3, 'days');
                            console.log($now);
                            console.log($dateMin);

                            $('#@(controlId)').bootstrapMaterialDatePicker({
                                format: 'hh:mm A',
                                shortTime: true,
                                // minDate: new Date(),
                                // maxDate: new Date(new Date().setDate(new Date().getDate() + 15)),
                                //currentDate: new Date(),
                                date: false,
                                time: true,
                                monthPicker: false,
                                year: true,
                                clearButton: false,
                                nowButton: false,
                                switchOnClick: true,
                                cancelText: 'Cancel',
                                //okText: 'VALIDER',
                                //clearText: 'EFFACER',
                                //nowText: 'MAINTENANT',
                                //triggerEvent: 'focus',
                                //lang: 'en',
                                weekStart: 1,
                            });

                        });

                    </script>
                    <style>

                        :root {
                            --primary: #c09e6c !important;
                        }

                        .btn-outline-primary {
                            background-color: #c09e6c !important;
                            color: white !important;
                        }
                    </style>
                }
                break;

            case AttributeControlType.MultiDatepickerCalendar:
                {
                    <div class="attribute-data">
                        @*<input id="@(endDateControlId)" name="@(endDateControlId)" type="text" class="datepicker" value="@(Model.RentalEndDate.HasValue ? Model.RentalEndDate.Value.ToShortDateString() : null)" @if(isMobileDevice){<text>readonly</text>}/>*@
                        <input class="form-control" id="@(controlId)" value="@(attribute.DefaultValue)" name="@(controlId)" type="text" placeholder="Choose time">
                        <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.8.0/js/bootstrap-datepicker.js"></script>
                        <link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datepicker/1.8.0/css/bootstrap-datepicker.css" rel="stylesheet" />

                        <script asp-location="Footer">
                            $(document).ready(function () {
                                $("#@(controlId)").datepicker({ dateFormat: "yy/m/d", multidate: true });
                            });
                        </script>
                    </div>
                }
                break;

            case AttributeControlType.Datepicker:
            case AttributeControlType.ColorSquares:
            case AttributeControlType.ImageSquares:
                {
                    //not support attribute type
                }
                break;

            case AttributeControlType.FileUpload:
                {
                    Download download = null;
                    if (!string.IsNullOrEmpty(attribute.DefaultValue))
                    {
                        download = await downloadService.GetDownloadByGuidAsync(new Guid(attribute.DefaultValue));
                    }

                    @* register CSS and JS *@
                    <link rel="stylesheet" href="~/lib_npm/fine-uploader/fine-uploader/fine-uploader.min.css" />
                    <script asp-exclude-from-bundle="true" src="~/lib_npm/fine-uploader/jquery.fine-uploader/jquery.fine-uploader.min.js" asp-location="Footer"></script>

                    //ex. ['jpg', 'jpeg', 'png', 'gif'] or []
                   // var allowedFileExtensions = null;// string.Join(", ", attribute.AllowedFileExtensions.Select(x => "'" + x.Trim() + "'").ToList());

                    if (download != null)
                    {
                        <input id="@(controlId)" name="@(controlId)" type="hidden" value="@download.DownloadGuid" />
                    }
                    else
                    {
                        <input id="@(controlId)" name="@(controlId)" type="hidden" />
                    }

                    @*fine uploader container*@
                    <div id="@(controlId)uploader"></div>
                    @*fine uploader template (keep it synchronized to \Content\fineuploader\templates\default.html)*@
                    <script type="text/template" asp-location="Footer" id="@(controlId)-qq-template">
                        <div class="qq-uploader-selector qq-uploader">
                            <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
                                <span>@T("Common.FileUploader.DropFiles")</span>
                            </div>
                            <div class="qq-upload-button-selector qq-upload-button">
                                <div>@T("Common.FileUploader.Upload")</div>
                            </div>
                            <span class="qq-drop-processing-selector qq-drop-processing">
                                <span>@T("Common.FileUploader.Processing")</span>
                                <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
                            </span>
                            <ul class="qq-upload-list-selector qq-upload-list">
                                <li>
                                    <div class="qq-progress-bar-container-selector">
                                        <div class="qq-progress-bar-selector qq-progress-bar"></div>
                                    </div>
                                    <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                                    <span class="qq-edit-filename-icon-selector qq-edit-filename-icon"></span>
                                    <span class="qq-upload-file-selector qq-upload-file"></span>
                                    <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">
                                    <span class="qq-upload-size-selector qq-upload-size"></span>
                                    <a class="qq-upload-cancel-selector qq-upload-cancel" href="#">@T("Common.FileUploader.Cancel")</a>
                                    <a class="qq-upload-retry-selector qq-upload-retry" href="#">@T("Common.FileUploader.Retry")</a>
                                    <a class="qq-upload-delete-selector qq-upload-delete" href="#">@T("Common.FileUploader.Delete")</a>
                                    <span class="qq-upload-status-text-selector qq-upload-status-text"></span>
                                </li>
                            </ul>
                        </div>
                    </script>
                    <script asp-location="Footer">
                        $(document).ready(function () {
                            $("#@(controlId)uploader").fineUploader({
                                request: {
                                    endpoint: '@(Url.RouteUrl("UploadFileProductAttributeForVendor", new { attributeId = attribute.Id }))'
                                },
                                template: "@(controlId)-qq-template",
                                multiple: false,
                                validation: {
                                }
                            }).on("complete", function (event, id, name, responseJSON, xhr) {
                                $("#@(controlId)").val(responseJSON.downloadGuid);
                                if (responseJSON.success) {
                                    $("#@(controlId + "downloadurl")").html("<a href='" + responseJSON.downloadUrl + "'>@T("Common.FileUploader.DownloadUploadedFile")</a>");
                                    $("#@(controlId + "remove")").show();
                                }
                            });

                            $("#@(controlId + "remove")").on('click', function (e) {
                                $("#@(controlId + "downloadurl")").html("");
                                $("#@(controlId)").val('');
                                $(this).hide();
                            });
                        });
                    </script>
                    <div id="@(controlId + "downloadurl")" style="text-decoration: underline;">
                        @if (download != null)
                        {
                            <a href="@(Url.Action("GetFileUpload", "Download", new {downloadId = download.DownloadGuid}))" class="download-uploaded-file">@T("Common.FileUploader.DownloadUploadedFile")</a>
                        }
                    </div>
                    <div>
                        @if (download != null)
                        {
                            <a id="@(controlId + "remove")" class="remove-download-button">@T("Common.FileUploader.RemoveDownload")</a>
                        }
                        else
                        {
                            <a id="@(controlId + "remove")" class="remove-download-buttonn" style="display: none;">@T("Common.FileUploader.RemoveDownload")</a>
                        }
                    </div>

                }
                break;

            case AttributeControlType.CustomMultiParams:
                {
                    @*//TODO: should create a partial view for entire case*@
                    <textarea class="form-control" id="@(controlId)" name="@(controlId)" type="text" style="display:block">@(attribute.DefaultValue)</textarea>

                    <div class="">
                        <div id="table" class="table-editable centered-vertically">
                            <span class="table-add fa fa-plus-circle fa-2x"></span>

                            <table class="table" id="personDataTable">
                                <tr>
                                    <th>start</th>
                                    <th>end</th>
                                    <th>WeekDays</th>
                                    <th>Dates</th>
                                    <th></th>
@*                                    <th></th>*@
                                </tr>
                                <!-- This is our clonable table line -->
                                <tr class="hide">
                                 
                                    <td contenteditable="true" class="time"><input type="text" class="datepicker" type="text" /></td>
                                    <td contenteditable="true" class="time"><input type="text" class="datepicker " type="text" /></td>
                                    <td contenteditable="true">
                                        <select name="daySelected" class="form-control" id="day">
                                            <option value="pick">Pick a day</option>
                                            <option value="daily">Daily</option>
                                            <option value="Mon">Monday</option>
                                            <option value="Tue">Tuesday</option>
                                            <option value="Wed">Wednesday</option>
                                            <option value="Thu">Thursday</option>
                                            <option value="Fri">Friday</option>
                                            <option value="Sat">Saturday</option>
                                            <option value="Sun">Sunday</option>
                                        </select>

                                    </td>
                                     <td contenteditable="true" class="date"><input type="text" class="multidatepicker" type="text"></td>
                                    <td></td>

                                    <td>
                                        <span class="table-remove fa fa-trash fa-2x"></span>
                                    </td>
                                    <td></td>
                              @*      <td>
                                        <span class="table-up fa fa-chevron-circle-up fa-2x"></span><span class="table-down fa fa-chevron-circle-down fa-2x"></span>
                                    </td>*@
                                </tr>
                            </table>
                        </div>
                        @*//TODO: btn not required, should be removed along with scripts and styles*@
                        <button id="export-btn" type="button" class="btn btn-primary">Validate and accept Timings</button>
                        @*<p id="export"></p>*@
                    </div>
                    <script>

                        var $TABLE = $('#table');
                        var $BTN = $('#export-btn');
                        var $EXPORT = $('#export');

                        $(function() {

                          $(".datepicker").bootstrapMaterialDatePicker({
                                format: 'hh:mm A',
                                shortTime: true,
                                date: false,
                                time: true,
                                monthPicker: false,
                                year: true,
                                clearButton: false,
                                nowButton: false,
                                switchOnClick: true,
                                cancelText: 'Cancel',
                                weekStart: 1,
                            });

                             $(".multidatepicker").datepicker({ dateFormat: "yy/m/d", multidate: true });
                        });
                        $(function() {
                        $('.time').click(function() {
                        $(this).find('.datepicker').focus();
                        });
                        });
                       let crrr = JSON.parse(document.getElementById("@(controlId)").textContent);
                        data = [...crrr];
       
                                drawTable(data);
                        function drawTable(data) {
 
                        for (var i = 0; i < data.length; i++) {
                            drawRow(data[i],i);       
                        }
                        }

                        function drawRow(rowData,i) {
                        var row = $("<tr />"); 
                        $("#personDataTable").append(row); //this will append tr element to table... keep its reference for a while since we will add cels into it
 


                        row.append($('<td contenteditable="true" class="time" ><input type="text" class="datepicker" value="'+rowData.start+'" type="text" /></td>'));
                        row.append($('<td contenteditable="true" class="time"><input type="text" class="datepicker" value="'+rowData.end+'" type="text" /></td>'));

                            row.append($('<td contenteditable="true"><select name="daySelected" class="form-control"  id=' + rowData.weekdays + '>       <option value="pick">Pick a day</option>                       <option value="Mon">Monday</option>                <option value="Tue">Tuesday</option>                <option value="Wednesday">Wednesday</option>                <option value="Thu">Thursday</option>                <option value="Fri">Friday</option>                <option value="Sat">Saturday</option>                <option value="Sun">Sunday</option>            </select></td>'));
                            $("#"+rowData.weekdays).val(rowData.weekdays);  
                        row.append($('<td contenteditable="true" class="date"><input type="text" class="multidatepicker " value= "'+rowData.dates+'" type="text"></td>'));
                       
                        
                        row.append($('<td></td><td><span class="table-remove fa fa-trash fa-2x"></span></td><td></td>'));
                        @*<td><span class="table-up fa fa-chevron-circle-up fa-2x"></span><span class="table-down fa fa-chevron-circle-down fa-2x"></span></td></tr></table>'));*@
                        }



                        $('.table-add').click(function () {
                        var $clone = $TABLE.find('tr.hide').clone(true).removeClass('hide table-line');
                        $clone.find("input.datepicker").each(function(){
                        $(this).attr("id", "").removeData().off();
                        $(this).find('.add-on').removeData().off();
                        $(this).find('input').removeData().off();
                       // $(this).timepicker({defaultTime:'16:20', minuteStep: 1, showMeridian: false});
                        });

                        $TABLE.find('table').append($clone).find("input.datepicker").addClass('datepicker');

                        var minDate = new Date();
                        minDate.setMinutes(minDate.getMinutes() + 20);

  
                        $(".datepicker").bootstrapMaterialDatePicker({
                                format: 'hh:mm A',
                                shortTime: true,
                                date: false,
                                time: true,
                                minDate: minDate,  
                                monthPicker: false,
                                year: true,
                                clearButton: false,
                                nowButton: false,
                                switchOnClick: true,
                                cancelText: 'Cancel',
                                weekStart: 1,
                            });

                            $(".multidatepicker").datepicker({ dateFormat: "yy/m/d", multidate: true });
                        });

                        $('.table-remove').click(function () {
                        $(this).parents('tr').detach();
                        });

                        $('.table-up').click(function () {
                        var $row = $(this).parents('tr');
                        if ($row.index() === 1) return; // Don't go above the header
                        $row.prev().before($row.get(0));
                        });

                        $('.table-down').click(function () {
                        var $row = $(this).parents('tr');
                        $row.next().after($row.get(0));
                        });

                        // A few jQuery helpers for exporting only
                        jQuery.fn.pop = [].pop;
                        jQuery.fn.shift = [].shift;

                        $BTN.click(function () {
                        removeElementsByClass("table-error")
                        var $rows = $TABLE.find('tr:not(:hidden)');
                        var $tds = $TABLE.find('td:not(:hidden)');
                        var headers = [];
                        var data = [];

  
                        // Get the headers (add special header logic here)
                        $($rows.shift()).find('th:not(:empty)').each(function () {
                        headers.push($(this).text().toLowerCase());
                        });
  
                        // Turn all existing rows into a loopable array
                        $rows.each(function () {
                        var $td = $(this).find('td');
                        var $td2 = $td.find('input'); 
                        var $td3 = $td.find('select');
                        var h2 = {};
  
                        // Use the headers from earlier to name our hash keys
                        headers.forEach(function (header, i) {
                            h2[header] = $td.eq(i).find('input,select').val() || $td.eq(i).text();
                            console.log(h2[header]);
                        }); 
                        if(  convertTime12toHrs(h2.start) >  convertTime12toHrs(h2.end) ){
                            let errorText = `<p class="table-error" style="color: red"><b>.</b> start time[${h2.start}]  should be smaller then end time[${h2.end}]↓</p>`;
                                document.getElementsByTagName('table')[0].insertAdjacentHTML("beforebegin",errorText);
                            return;
                        }
                        //check if the day exists in json here
                        data.push(h2);
                        });
                        if(document.getElementsByClassName("table-error").length == 0){
                            document.getElementById("@(controlId)").textContent = (JSON.stringify(data));
                        }
                        });

                        function removeElementsByClass(className){
                            const elements = document.getElementsByClassName(className);
                            while(elements.length > 0){
                                elements[0].parentNode.removeChild(elements[0]);
                            }
                        }

                        function convertTime12toHrs(time12h) {
                            const [time, modifier] = time12h.split(' ');
                            let [hours, minutes] = time.split(':');
                            if (hours === '12') {
                                hours = '00';
                            }
                            if (modifier === 'PM') {
                                hours = parseInt(hours, 10) + 12;
                            }
                            return `${hours}${minutes}`;
                        }
                        //this will throw error, wcch will allow you to access script, while pushing remove it
                        debuggerEnabler();
                    </script>
                    //TODO: styles - entire style is taken from https://codepen.io/caim/pen/pggZOx
                    //this can be cleaned up, based on your interest
                 <style>
                     .hide{
                        display:none;
                     }
                 </style>
                
                }
                break;
        }
        @if (attribute.IsRequired)
        {
            <nop-required />
        }
    </div>
                    //TODO: should use enums
    @if ("compare password" == attribute.DependencyType)
    {
        var dependentControlId = $"{NopVendorDefaults.VendorAttributePrefix}{@attribute.DependentAttributeId}";
        <script>
            $('#@(controlId), #@(dependentControlId)').on('keyup', function () 
            {
                console.log($('#@(controlId)').val());
                console.log($('#@(dependentControlId) ').val());
                    if ($('#@(controlId)').val() !='' && $('#@(dependentControlId) ').val() != '') 
                if ($('#@(controlId)').val() == $('#@(dependentControlId)').val()) {
                    $('#message@(controlId)').html('@textPrompt Matching').css('color', 'green');
                } else 
                    $('#message@(controlId)').html('@textPrompt Not Matching').css('color', 'red');
            });
        </script>
    }

    @if(IsDependentSelectorAvailable)
    {
        var dependentControlId = $"{NopVendorDefaults.VendorAttributePrefix}{@attribute.DependentAttributeId}";
        <script>
                $(document).ready(function () 
                {
                    let select = document.querySelector('#@(dependentControlId)');
                    select?.addEventListener('change',function()
                    {
                        let val = $('#@(dependentControlId)').find(":selected").val();
                        onSelection(val);
                        event.stopPropagation();
                    });
                });
        </script>
    }
}

<script>
        function onSelection(id){    
            let elems = document.getElementsByClassName('dependent'),
            size = elems.length;
            for (let i = 0; i < size; i++) {
                var box = elems[i];
                    box.setAttribute('style', 'display:none');
                                   
                if(box.className == 'dependent '+id){
                    box.setAttribute('style', 'display:block');
                }
            }
        }
</script>
<style>
    .fa-question-circle {
    color: #3c8dbc;
    }
    .label-wrapper {
    
    display: flex;
    align-items: flex-start;
}
</style>